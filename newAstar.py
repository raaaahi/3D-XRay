{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOjbvW9uJ7SrNwAMzOfht8O",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/raaaahi/3D-XRay/blob/master/newAstar.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "axCfIAL5SpQM",
        "outputId": "b52b16b6-f603-4532-f2b1-141536be4572"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n",
            "/content/drive/MyDrive/Biorobotics II /scripts\n",
            "anglesToImgQualityDEBUG.py  \u001b[0m\u001b[01;34mground_truth_esfs\u001b[0m/       reconstruction.ipynb\n",
            "anglesToImgQuality.py       \u001b[01;34mHD_fbp_output_36angles\u001b[0m/  simplified_function2.py\n",
            "CTtoDXR.ipynb               heuristics.ipynb         simplified_function.ipynb\n",
            "CTtoDXR.py                  \u001b[01;34moutputs\u001b[0m/                 simplified_function.py\n",
            "Datacollection.gsheet       \u001b[01;34m__pycache__\u001b[0m/             \u001b[01;34mstandard_dxrHD\u001b[0m/\n"
          ]
        }
      ],
      "source": [
        "import heapq\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')\n",
        "%cd /content/drive/MyDrive/Biorobotics II /scripts/\n",
        "%ls\n",
        "\n",
        "import anglesToImgQualityDEBUG #this is the script!\n",
        "import anglesToImgQuality #this is the same script, but runs faster but no debug outputs"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def a_star(target_rmse=0.12, max_angles=360, angle_step=5, max_iterations=1000):\n",
        "    \"\"\"\n",
        "    A* algorithm to find optimal angles for CT reconstruction.\n",
        "\n",
        "    Args:\n",
        "        target_rmse: Target RMSE to achieve\n",
        "        max_angles: Maximum angle value (typically 360)\n",
        "        angle_step: Step size between angles to consider\n",
        "        max_iterations: Maximum iterations to prevent infinite search\n",
        "\n",
        "    Returns:\n",
        "        dict: Best solution found with angles, mean_error, and completeness\n",
        "    \"\"\"\n",
        "    # Priority queue to store states: (f_score, state_id, g_score, angles)\n",
        "    # f_score = g_score + h_score (estimated total cost)\n",
        "    # g_score = cost so far (number of angles used)\n",
        "    # angles = tuple of angles selected so far\n",
        "    open_set = []\n",
        "\n",
        "    # Track explored angle combinations and their g_scores\n",
        "    closed_set = {}  # {angles_tuple: g_score}\n",
        "\n",
        "    # Initial state (start with angle 0)\n",
        "    initial_angles = (0,90,270)\n",
        "    initial_g_score = 1  # Cost of using one angle\n",
        "\n",
        "    # Evaluate initial state\n",
        "    initial_mean_error, _ = anglesToImgQuality.anglesToImgQuality(initial_angles)\n",
        "    initial_completeness = anglesToCompleteness(initial_angles, max_angles)\n",
        "\n",
        "    # Calculate initial h_score (heuristic) - estimated additional angles needed\n",
        "    initial_h_score = estimate_remaining_angles(initial_mean_error, target_rmse, initial_completeness)\n",
        "\n",
        "    # Calculate initial f_score\n",
        "    initial_f_score = initial_g_score + initial_h_score\n",
        "\n",
        "    # Track best solution found so far\n",
        "    best_solution = {\n",
        "        'angles': list(initial_angles),\n",
        "        'mean_error': initial_mean_error,\n",
        "        'completeness': initial_completeness,\n",
        "        'f_score': initial_f_score\n",
        "    }\n",
        "\n",
        "    # Add initial state to open set\n",
        "    # We use state_id to break ties when f_scores are equal\n",
        "    state_id = 0\n",
        "    heapq.heappush(open_set, (initial_f_score, state_id, initial_g_score, initial_angles))\n",
        "\n",
        "    # Track parent states for path reconstruction\n",
        "    parents = {}  # {child_angles: parent_angles}\n",
        "\n",
        "    iterations = 0\n",
        "\n",
        "    while open_set and iterations < max_iterations:\n",
        "        iterations += 1\n",
        "\n",
        "        # Get state with lowest f_score\n",
        "        f_score, _, g_score, current_angles = heapq.heappop(open_set)\n",
        "\n",
        "        # Check if we've found a better solution\n",
        "        try:\n",
        "            mean_error, _ = anglesToImgQuality.anglesToImgQuality(current_angles)\n",
        "            completeness = anglesToCompleteness(current_angles, max_angles)\n",
        "\n",
        "            # Update best solution if current is better (weighted combined metric)\n",
        "            current_quality = calculate_solution_quality(mean_error, target_rmse, completeness)\n",
        "            best_quality = calculate_solution_quality(best_solution['mean_error'], target_rmse, best_solution['completeness'])\n",
        "\n",
        "            if current_quality > best_quality:\n",
        "                best_solution = {\n",
        "                    'angles': list(current_angles),\n",
        "                    'mean_error': mean_error,\n",
        "                    'completeness': completeness,\n",
        "                    'f_score': f_score\n",
        "                }\n",
        "\n",
        "                print(f\"Iteration {iterations}: Found better solution with {len(current_angles)} angles\")\n",
        "                print(f\"  Mean Error: {mean_error:.4f}, Completeness: {completeness:.4f}\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error evaluating angles {current_angles}: {e}\")\n",
        "            continue\n",
        "\n",
        "        # Check if we've reached the goal\n",
        "        if mean_error <= target_rmse and completeness >= 0.9:\n",
        "            print(f\"Goal reached after {iterations} iterations!\")\n",
        "            # Reconstruct path is unnecessary as we already have the angles\n",
        "            return best_solution\n",
        "\n",
        "        # If we've already found a better path to this state, skip expansion\n",
        "        if current_angles in closed_set and closed_set[current_angles] <= g_score:\n",
        "            continue\n",
        "\n",
        "        # Add current state to closed set\n",
        "        closed_set[current_angles] = g_score\n",
        "\n",
        "        # Expand current state (generate successor states)\n",
        "        for new_angle in range(0, max_angles, angle_step):\n",
        "            # Skip if angle already in current set\n",
        "            if new_angle in current_angles:\n",
        "                continue\n",
        "\n",
        "            # Create new state by adding angle\n",
        "            # Sort to ensure we can check for duplicate states properly\n",
        "            new_angles = tuple(sorted(current_angles + (new_angle,)))\n",
        "\n",
        "            # Calculate new g_score (cost so far)\n",
        "            new_g_score = len(new_angles)  # Cost is number of angles\n",
        "\n",
        "            # Skip if we've already found a better path to this state\n",
        "            if new_angles in closed_set and closed_set[new_angles] <= new_g_score:\n",
        "                continue\n",
        "\n",
        "            # Calculate new state metrics\n",
        "            try:\n",
        "                new_mean_error, _ = anglesToImgQuality.anglesToImgQuality(new_angles)\n",
        "                new_completeness = anglesToCompleteness(new_angles, max_angles)\n",
        "\n",
        "                try:\n",
        "                  new_mean_error, _ = anglesToImgQuality.anglesToImgQuality(new_angles)\n",
        "                  new_completeness = anglesToCompleteness(new_angles, max_angles)\n",
        "\n",
        "                  # Early pruning check - ADD THIS CODE\n",
        "                  if is_unpromising_state(new_angles, new_mean_error, new_completeness, best_solution, target_rmse):\n",
        "                      continue  # Skip this state if it's unpromising\n",
        "\n",
        "                  # Calculate heuristic (h_score)\n",
        "                  new_h_score = estimate_remaining_angles(new_mean_error, target_rmse, new_completeness)\n",
        "\n",
        "                  # Calculate f_score\n",
        "                  new_f_score = new_g_score + new_h_score\n",
        "\n",
        "                  # Add to open set\n",
        "                  state_id += 1\n",
        "                  heapq.heappush(open_set, (new_f_score, state_id, new_g_score, new_angles))\n",
        "\n",
        "                  # Track parent for path reconstruction\n",
        "                  parents[new_angles] = current_angles\n",
        "                except Exception as e:\n",
        "                  print(f\"Error evaluating new angles {new_angles}: {e}\")\n",
        "                  continue\n",
        "\n",
        "\n",
        "                # Calculate heuristic (h_score)\n",
        "                new_h_score = estimate_remaining_angles(new_mean_error, target_rmse, new_completeness)\n",
        "\n",
        "                # Calculate f_score\n",
        "                new_f_score = new_g_score + new_h_score\n",
        "\n",
        "                # Add to open set\n",
        "                state_id += 1\n",
        "                heapq.heappush(open_set, (new_f_score, state_id, new_g_score, new_angles))\n",
        "\n",
        "                # Track parent for path reconstruction\n",
        "                parents[new_angles] = current_angles\n",
        "            except Exception as e:\n",
        "                print(f\"Error evaluating new angles {new_angles}: {e}\")\n",
        "                continue\n",
        "\n",
        "    print(f\"Search completed after {iterations} iterations\")\n",
        "    return best_solution"
      ],
      "metadata": {
        "id": "Xp1paICoSvK4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def estimate_remaining_angles(current_error, target_error, current_completeness):\n",
        "    \"\"\"\n",
        "    Heuristic function: Estimates additional angles needed to reach target.\n",
        "    This is an admissible heuristic that never overestimates true cost.\n",
        "\n",
        "    Args:\n",
        "        current_error: Current RMSE\n",
        "        target_error: Target RMSE\n",
        "        current_completeness: Current coverage completeness (0-1)\n",
        "\n",
        "    Returns:\n",
        "        float: Estimated additional angles needed\n",
        "    \"\"\"\n",
        "    # Estimate based on the difference between current and target error\n",
        "    if current_error <= target_error:\n",
        "        error_factor = 0\n",
        "    else:\n",
        "        # Error ratio (how far we are from target)\n",
        "        error_ratio = (current_error - target_error) / current_error\n",
        "        error_factor = error_ratio * 10  # Scale factor\n",
        "\n",
        "    # Estimate based on incompleteness\n",
        "    completeness_factor = max(0, (0.9 - current_completeness) * 10)\n",
        "\n",
        "    # Combine factors (use minimum to ensure admissibility)\n",
        "    return min(error_factor, completeness_factor)\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "def calculate_solution_quality(error, target_error, completeness):\n",
        "    \"\"\"\n",
        "    Calculate solution quality using a weighted combination of error and completeness.\n",
        "    Higher values are better.\n",
        "\n",
        "    Args:\n",
        "        error: RMSE error of the solution\n",
        "        target_error: Target RMSE\n",
        "        completeness: Coverage completeness (0-1)\n",
        "\n",
        "    Returns:\n",
        "        float: Quality score (higher is better)\n",
        "    \"\"\"\n",
        "    # Error component (1.0 when error equals target, declines as error increases)\n",
        "    if error <= target_error:\n",
        "        error_quality = 1.0\n",
        "    else:\n",
        "        error_quality = target_error / error  # Inverse relationship\n",
        "\n",
        "    # Completeness component (linear)\n",
        "    completeness_quality = completeness\n",
        "\n",
        "    # Combined quality (weighted average)\n",
        "    return (error_quality * 0.8) + (completeness_quality * 0.2)\n",
        "\n",
        "\n",
        "\n",
        "def is_unpromising_state(angles, error, completeness, best_solution, target_rmse):\n",
        "    \"\"\"\n",
        "    Determine if a state is unlikely to lead to an optimal solution.\n",
        "\n",
        "    Args:\n",
        "        angles: Tuple of selected angles\n",
        "        error: Current RMSE error\n",
        "        completeness: Current completeness score\n",
        "        best_solution: Current best solution found\n",
        "        target_rmse: Target RMSE to achieve\n",
        "\n",
        "    Returns:\n",
        "        bool: True if the state is unpromising and should be pruned\n",
        "    \"\"\"\n",
        "    # 1. If we already have a solution with better error AND better completeness\n",
        "    if (error > best_solution['mean_error'] and\n",
        "        completeness < best_solution['completeness']):\n",
        "        return True\n",
        "\n",
        "    # 2. If we have too many angles but still poor quality\n",
        "    if (len(angles) > len(best_solution['angles']) * 1.5 and\n",
        "        error > best_solution['mean_error']):\n",
        "        return True\n",
        "\n",
        "    # 3. Check for poor angle distribution\n",
        "    sorted_angles = sorted(angles)\n",
        "    full_circle = sorted_angles + [sorted_angles[0] + 360]\n",
        "    gaps = [full_circle[i+1] - full_circle[i] for i in range(len(full_circle)-1)]\n",
        "\n",
        "    # If there's a very large gap (e.g., more than 120 degrees) and we have many angles\n",
        "    if max(gaps) > 120 and len(angles) > 5:\n",
        "        return True\n",
        "\n",
        "    # 4. If we have many angles but error still far from target\n",
        "    if len(angles) > 10 and error > target_rmse * 2:\n",
        "        return True\n",
        "\n",
        "    # 5. If adding more angles isn't improving completeness effectively\n",
        "    if len(angles) > 6 and completeness < 0.2:\n",
        "        return True\n",
        "\n",
        "    print(\"pruned \\n\")\n",
        "    return False\n",
        "\n",
        "\n",
        "def anglesToCompleteness(test_angles, max_angles=360):\n",
        "    \"\"\"\n",
        "    Calculate the completeness of angle coverage.\n",
        "\n",
        "    Args:\n",
        "        test_angles: List or tuple of angles used\n",
        "        max_angles: Maximum angle value (typically 360)\n",
        "\n",
        "    Returns:\n",
        "        float: Completeness score (0-1)\n",
        "    \"\"\"\n",
        "    if len(test_angles) == 0:\n",
        "        return 0.0\n",
        "\n",
        "    # Basic completeness based on number of angles\n",
        "    basic_completeness = len(test_angles) / max_angles\n",
        "\n",
        "    # Calculate gap distribution uniformity\n",
        "    sorted_angles = sorted(test_angles)\n",
        "    full_circle = sorted_angles + [sorted_angles[0] + max_angles]\n",
        "\n",
        "    gaps = [full_circle[i+1] - full_circle[i] for i in range(len(full_circle)-1)]\n",
        "    max_gap = max(gaps)\n",
        "\n",
        "    ideal_gap = max_angles / len(test_angles)\n",
        "    gap_penalty = min(1.0, ideal_gap / max_gap)\n",
        "\n",
        "    # Combine basic completeness with gap penalty\n",
        "    adjusted_completeness = basic_completeness * gap_penalty\n",
        "\n",
        "    return adjusted_completeness\n"
      ],
      "metadata": {
        "id": "NADDCFw8TAr-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Example usage\n",
        "    result = a_star(target_rmse=0.45, angle_step=5, max_iterations=1000)\n",
        "    print(\"\\nFinal result:\")\n",
        "    print(f\"Angles: {result['angles']}\")\n",
        "    print(f\"Mean Error: {result['mean_error']:.4f}\")\n",
        "    print(f\"Completeness: {result['completeness']:.4f}\")\n",
        "    print(f\"Number of angles: {len(result['angles'])}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CCdqgwlxSxPP",
        "outputId": "6546964c-9a7e-46db-9f60-1563d4dd0b30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 12: Found better solution with 4 angles\n",
            "  Mean Error: 0.3075, Completeness: 0.0061\n",
            "Iteration 14: Found better solution with 4 angles\n",
            "  Mean Error: 0.3052, Completeness: 0.0067\n",
            "Iteration 16: Found better solution with 4 angles\n",
            "  Mean Error: 0.3014, Completeness: 0.0074\n",
            "Iteration 18: Found better solution with 4 angles\n",
            "  Mean Error: 0.2241, Completeness: 0.0083\n",
            "Iteration 20: Found better solution with 4 angles\n",
            "  Mean Error: 0.1518, Completeness: 0.0095\n",
            "Iteration 22: Found better solution with 4 angles\n",
            "  Mean Error: 0.2499, Completeness: 0.0111\n",
            "Search completed after 200 iterations\n",
            "\n",
            "Final result:\n",
            "Angles: [0, 90, 180, 270]\n",
            "Mean Error: 0.2499\n",
            "Completeness: 0.0111\n",
            "Number of angles: 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MylzOq2rc_pY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#modify \"the paramter in the function is a list, for our purposes, this is a list that updates as the specific angles change,\n",
        "#test_angles = list(range(0, 360, 90))  # Use every X degrees\n",
        "#debugging area\n",
        "\n",
        "solvedAngles = [0, 180, 195, 200, 30, 220, 190, 170, 10, 215, 185, 40, 245, 135, 280, 100, 320, 80, 165, 5, 35, 330, 210, 60, 295, 340, 120, 270, 145, 235, 75, 255, 305, 90, 275, 105, 335, 300, 25, 350, 325, 175, 355, 240, 65, 155, 50, 115, 310, 70, 160, 225, 45, 250, 315, 285, 110, 20, 55, 95, 345, 130, 260, 140, 265, 15, 230, 85, 125, 290\n",
        "]\n",
        "\n",
        "\n",
        "# test_angles = list(range(0, 355, 5))  # Use every C degrees between A and B\n",
        "test_angles  = [0, 90, 180, 270]\n",
        "\n",
        "\n",
        "mean_error, std_error = anglesToImgQualityDEBUG.anglesToImgQuality(test_angles)  #can be suppressed to remove text outputs, rn for debugging\n",
        "print(f\"Test Results: Mean Error = {mean_error:.4f}, Std Error = {std_error:.4f}\")\n",
        "\n",
        "completeness = anglesToCompleteness(test_angles)\n",
        "print(f\"Test Results: Completeness = {completeness:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pAhsUrPXTC8-",
        "outputId": "050c913a-6ecf-4a06-af18-0bc578cdde73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading and transposing projections...\n",
            "Loaded 4 projections with angles: 0.0° to 270.0°\n",
            "Projection dimensions after transpose: 128x128\n",
            "Generating reconstructions for slices: [np.int64(12), np.int64(25), np.int64(38), np.int64(51), np.int64(64), np.int64(77), np.int64(90), np.int64(103), np.int64(116)]\n",
            "Generating ground truth reconstructions using all 360 angles...\n",
            "Loaded ground truth ESF for slice 12\n",
            "Slice 12: ESF RMSE = 0.1625\n",
            "Loaded ground truth ESF for slice 25\n",
            "Slice 25: ESF RMSE = 0.3527\n",
            "Loaded ground truth ESF for slice 38\n",
            "Slice 38: ESF RMSE = 0.2993\n",
            "Loaded ground truth ESF for slice 51\n",
            "Slice 51: ESF RMSE = 0.4439\n",
            "Loaded ground truth ESF for slice 64\n",
            "Slice 64: ESF RMSE = 0.3847\n",
            "Loaded ground truth ESF for slice 77\n",
            "Slice 77: ESF RMSE = 0.1341\n",
            "Loaded ground truth ESF for slice 90\n",
            "Slice 90: ESF RMSE = 0.4025\n",
            "Loaded ground truth ESF for slice 103\n",
            "Slice 103: ESF RMSE = 0.0325\n",
            "Loaded ground truth ESF for slice 116\n",
            "Slice 116: ESF RMSE = 0.0371\n",
            "Mean ESF Error: 0.2499\n",
            "Std Dev of ESF Error: 0.1512\n",
            "ESF errors saved to outputs/HD_fbp_output_4angles/esf_errors.csv\n",
            "Reconstruction complete. Results saved to outputs/HD_fbp_output_4angles\n",
            "Test Results: Mean Error = 0.2499, Std Error = 0.1512\n",
            "Test Results: Completeness = 0.0111\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#modify \"the paramter in the function is a list, for our purposes, this is a list that updates as the specific angles change,\n",
        "#test_angles = list(range(0, 360, 90))  # Use every X degrees\n",
        "#debugging area\n",
        "\n",
        "solvedAngles = [0, 180, 195, 200, 30, 220, 190, 170, 10, 215, 185, 40, 245, 135, 280, 100, 320, 80, 165, 5, 35, 330, 210, 60, 295, 340, 120, 270, 145, 235, 75, 255, 305, 90, 275, 105, 335, 300, 25, 350, 325, 175, 355, 240, 65, 155, 50, 115, 310, 70, 160, 225, 45, 250, 315, 285, 110, 20, 55, 95, 345, 130, 260, 140, 265, 15, 230, 85, 125, 290\n",
        "]\n",
        "\n",
        "\n",
        "# test_angles = list(range(0, 355, 5))  # Use every C degrees between A and B\n",
        "test_angles  = solvedAngles\n",
        "\n",
        "\n",
        "mean_error, std_error = anglesToImgQuality.anglesToImgQuality(test_angles)  #can be suppressed to remove text outputs, rn for debugging\n",
        "print(f\"Test Results: Mean Error = {mean_error:.4f}, Std Error = {std_error:.4f}\")\n",
        "\n",
        "completeness = anglesToCompleteness(test_angles)\n",
        "print(f\"Test Results: Completeness = {completeness:.4f}\")"
      ],
      "metadata": {
        "id": "PBHC1C9ZjPge",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f2eee3b7-4afe-4c9c-ffa5-50717e0191da"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Results: Mean Error = 0.0159, Std Error = 0.0090\n",
            "Test Results: Completeness = 0.1000\n"
          ]
        }
      ]
    }
  ]
}